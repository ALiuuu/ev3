package com.aliu.ev3.ev3;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import com.aliu.ev3.R;import com.aliu.ev3.ev3.bluetooth.Ev3BtManager;import com.google.gson.JsonObject;import com.google.gson.JsonParser;import com.xuhao.didi.core.iocore.interfaces.ISendable;import com.xuhao.didi.core.pojo.OriginalData;import com.xuhao.didi.socket.client.sdk.OkSocket;import com.xuhao.didi.socket.common.interfaces.common_interfacies.server.IClient;import com.xuhao.didi.socket.common.interfaces.common_interfacies.server.IClientIOCallback;import com.xuhao.didi.socket.common.interfaces.common_interfacies.server.IClientPool;import com.xuhao.didi.socket.common.interfaces.common_interfacies.server.IServerManager;import com.xuhao.didi.socket.common.interfaces.common_interfacies.server.IServerShutdown;import com.xuhao.didi.socket.server.action.ServerActionAdapter;import java.net.Inet6Address;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.SocketException;import java.nio.charset.Charset;import java.util.Arrays;import java.util.Enumeration;import androidx.appcompat.app.AppCompatActivity;public class EActivity extends AppCompatActivity implements IClientIOCallback {    private String boxName = "abc";    private TextView mNumberTextView;    public static void open(Context context) {        Intent i = new Intent(context, EActivity.class);        context.startActivity(i);    }    @Override    protected void onResume() {        super.onResume();        Ev3BtManager.getInstance().start();    }    @Override    public void onBackPressed() {    }    @Override    public void onDestroy() {        super.onDestroy();        // ֹͣ��������        Ev3BtManager.getInstance().destory();    }    private TextView mIpTextView;    private TextView mMsgTextView;    private TextView mConnectTextView;    private static final String TAG = "fuck";    private IServerManager mServerManager;    private int mPort = 8081;    private String hostIP;    private void flushServerText() {        if (mServerManager.isLive()) {            new Handler(Looper.getMainLooper()).post(new Runnable() {                @Override                public void run() {                    mIpTextView.setText("服务器已启动 ip:" + hostIP + ":" + mPort);                }            });        } else {            new Handler(Looper.getMainLooper()).post(new Runnable() {                @Override                public void run() {                    mIpTextView.setText("服务器已关闭");                }            });        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_init);        Button button1 = findViewById(R.id.bt1);        button1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Ev3BtManager.getInstance().sendMsg(boxName, "1");                mNumberTextView.setText("1");            }        });        Button button2 = findViewById(R.id.bt2);        button2.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Ev3BtManager.getInstance().sendMsg(boxName, "2");                mNumberTextView.setText("2");            }        });        Button button3 = findViewById(R.id.bt3);        button3.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Ev3BtManager.getInstance().sendMsg(boxName, "3");                mNumberTextView.setText("3");            }        });        mNumberTextView = findViewById(R.id.tv_number);        mIpTextView = findViewById(R.id.tv_ip);        mMsgTextView = findViewById(R.id.tv_msg);        mConnectTextView = findViewById(R.id.tv_start);        mConnectTextView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!mServerManager.isLive()) {                    mServerManager.listen();                    mConnectTextView.setText("点击断开");                } else {                    mServerManager.shutdown();                    mConnectTextView.setText("点击连接");                }            }        });        hostIP = getHostIP();        mIpTextView.setText(hostIP);        mServerManager = OkSocket.server(mPort).registerReceiver(new ServerActionAdapter() {            @Override            public void onServerListening(int serverPort) {                Log.i(TAG, Thread.currentThread().getName() + " onServerListening,serverPort:" + serverPort);                flushServerText();            }            @Override            public void onClientConnected(IClient client, int serverPort, IClientPool clientPool) {                Log.i(TAG, Thread.currentThread().getName() + " onClientConnected,serverPort:" + serverPort + "--ClientNums:" + clientPool.size() + "--ClientTag:" + client.getUniqueTag());                client.addIOCallback(EActivity.this);            }            @Override            public void onClientDisconnected(IClient client, int serverPort, IClientPool clientPool) {                Log.i(TAG, Thread.currentThread().getName() + " onClientDisconnected,serverPort:" + serverPort + "--ClientNums:" + clientPool.size() + "--ClientTag:" + client.getUniqueTag());                client.removeIOCallback(EActivity.this);            }            @Override            public void onServerWillBeShutdown(int serverPort, IServerShutdown shutdown, IClientPool clientPool, Throwable throwable) {                Log.i(TAG, Thread.currentThread().getName() + " onServerWillBeShutdown,serverPort:" + serverPort + "--ClientNums:" + clientPool                        .size());                shutdown.shutdown();            }            @Override            public void onServerAlreadyShutdown(int serverPort) {                Log.i(TAG, Thread.currentThread().getName() + " onServerAlreadyShutdown,serverPort:" + serverPort);                flushServerText();            }        });    }    @Override    public void onClientRead(OriginalData originalData, IClient client, IClientPool<IClient, String> clientPool) {        String str = new String(originalData.getBodyBytes(), Charset.forName("utf-8"));        Log.e(TAG, "onClientRead: " + str);        if (str.equals("1")) {            Ev3BtManager.getInstance().sendMsg(boxName, "1");            mNumberTextView.setText("1");        } else if (str.equals("2")) {            Ev3BtManager.getInstance().sendMsg(boxName, "2");            mNumberTextView.setText("2");        } else if (str.equals("3")) {            Ev3BtManager.getInstance().sendMsg(boxName, "3");            mNumberTextView.setText("3");        }        JsonObject jsonObject = null;        try {            jsonObject = new JsonParser().parse(str).getAsJsonObject();            int cmd = jsonObject.get("cmd").getAsInt();            if (cmd == 54) {//登陆成功                String handshake = jsonObject.get("handshake").getAsString();                Log.i("onClientIOServer", Thread.currentThread().getName() + " 接收到:" + client.getHostIp() + " 握手信息:" + handshake);            } else if (cmd == 14) {//心跳                Log.i("onClientIOServer", Thread.currentThread().getName() + " 接收到:" + client.getHostIp() + " 收到心跳");            } else {                Log.i("onClientIOServer", Thread.currentThread().getName() + " 接收到:" + client.getHostIp() + " " + str);            }        } catch (Exception e) {            Log.i("onClientIOServer", Thread.currentThread().getName() + " 接收到:" + client.getHostIp() + " " + str);        }        MsgDataBean msgDataBean = new MsgDataBean(str);        clientPool.sendToAll(msgDataBean);    }    @Override    public void onClientWrite(ISendable sendable, IClient client, IClientPool<IClient, String> clientPool) {        byte[] bytes = sendable.parse();        bytes = Arrays.copyOfRange(bytes, 4, bytes.length);        String str = new String(bytes, Charset.forName("utf-8"));        JsonObject jsonObject = null;        try {            jsonObject = new JsonParser().parse(str).getAsJsonObject();            int cmd = jsonObject.get("cmd").getAsInt();            switch (cmd) {                case 54: {                    String handshake = jsonObject.get("handshake").getAsString();                    Log.i("onClientIOServer", Thread.currentThread().getName() + " 发送给:" + client.getHostIp() + " 握手数据:" + handshake);                    break;                }                default:                    Log.i("onClientIOServer", Thread.currentThread().getName() + " 发送给:" + client.getHostIp() + " " + str);            }        } catch (Exception e) {            Log.i("onClientIOServer", Thread.currentThread().getName() + " 发送给:" + client.getHostIp() + " " + str);        }    }    /**     * 获取ip地址     * 如果是移动网络，会显示自己的公网IP，如果是局域网，会显示局域网IP     * 因此本例中服务器端需要断开移动网络以得到本机局域网IP     */    public static String getHostIP() {        String hostIp = null;        try {            Enumeration nis = NetworkInterface.getNetworkInterfaces();            InetAddress ia;            while (nis.hasMoreElements()) {                NetworkInterface ni = (NetworkInterface) nis.nextElement();                Enumeration<InetAddress> ias = ni.getInetAddresses();                while (ias.hasMoreElements()) {                    ia = ias.nextElement();                    if (ia instanceof Inet6Address) {                        continue;// skip ipv6                    }                    String ip = ia.getHostAddress();                    if (!"127.0.0.1".equals(ip)) {                        hostIp = ia.getHostAddress();                        break;                    }                }            }        } catch (SocketException e) {            Log.i("error", "SocketException");            e.printStackTrace();        }        return hostIp;    }}